#ifndef TEXT_H_
#define TEXT_H_
#include <genesis.h>

/*
    Text functionality. Since undertale font is not bitmap (i.e. fits on 8x8
   pixel chunks), we have to handle letters with tails such as g or y that
   intersect with letters under it. This handles it.

    The hex data located in text.c is generated by ~/generate_lookup.py and
   copy-pasted here.

    ~/res/font_sheet.png is compressed to account for duplicate tiles with
   additional consideration for vertical and horizontal tiles. This was manually
   done by hand, further additions to ~/res/font_sheet.png in terms of
   alphanumeric position is highly discouraged thereof.

*/

// Used by draw_letter(). When we draw a letter, is there a character above it
// that is tailed?
typedef enum {
    LETTER_TAIL_NONE,
    LETTER_TAIL_g,
    LETTER_TAIL_p,
    LETTER_TAIL_q,
    LETTER_TAIL_Q,
    LETTER_TAIL_comma
} LetterTail;

#define MAX_LINE_LENGTH 32

/* draw_letter(...)

    Basically draws a letter onto screen with the specified parameters.

    - c: which ascii character to draw (doesn't account for all, only ones
   undertale takes account of)
   - x: head-tile position
   - y: head-tile position
   - offset: Where into the tilemap vram is the tilemap starting?
   - plane: What plane to draw it on? Default is BG_A
   - palette: Which palette to use?
   - tail: Whether or not letter above it is tailed, if so what tail is it?
*/
/*void draw_letter(char c, u8 x, u8 y, u16 offset, u8 plane, u8 palette,
                 LetterTail tail);
*/

void draw_letter(char letter, char above, u8 x, u8 y, u16 offset, u8 plane,
                 u8 palette);

void draw_lines(const char lines[][MAX_LINE_LENGTH], u8 num, u8 x, u8 y,
                u16 offset, u8 plane, u8 palette);

/* get_char_info(...)

    Letter data correlating with ascii characters is stored in a 2-d array,
   return which array contains the information.

    - c: which ascii character to draw
*/
u8 *get_char_info(char c);

#endif